#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <stdint.h>
#include <assert.h>
#include <iostream>
using namespace std;
uint64_t IP_Table[64] =
{
    1LL<<64-58, 1LL<<64-50, 1LL<<64-42, 1LL<<64-34, 1LL<<64-26, 1LL<<64-18, 1LL<<64-10, 1LL<<64-2,
    1LL<<64-60, 1LL<<64-52, 1LL<<64-44, 1LL<<64-36, 1LL<<64-28, 1LL<<64-20, 1LL<<64-12, 1LL<<64-4,
    1LL<<64-62, 1LL<<64-54, 1LL<<64-46, 1LL<<64-38, 1LL<<64-30, 1LL<<64-22, 1LL<<64-14, 1LL<<64-6,
    1LL<<64-64, 1LL<<64-56, 1LL<<64-48, 1LL<<64-40, 1LL<<64-32, 1LL<<64-24, 1LL<<64-16, 1LL<<64-8,
    1LL<<64-57, 1LL<<64-49, 1LL<<64-41, 1LL<<64-33, 1LL<<64-25, 1LL<<64-17,  1LL<<64-9, 1LL<<64-1,
    1LL<<64-59, 1LL<<64-51, 1LL<<64-43, 1LL<<64-35, 1LL<<64-27, 1LL<<64-19, 1LL<<64-11, 1LL<<64-3,
    1LL<<64-61, 1LL<<64-53, 1LL<<64-45, 1LL<<64-37, 1LL<<64-29, 1LL<<64-21, 1LL<<64-13, 1LL<<64-5,
    1LL<<64-63, 1LL<<64-55, 1LL<<64-47, 1LL<<64-39, 1LL<<64-31, 1LL<<64-23, 1LL<<64-15, 1LL<<64-7
};
//逆初始置换表IP^-1
uint64_t IP_1_Table[64] =
{
    1LL<<64-40, 1LL<<64-8, 1LL<<64-48, 1LL<<64-16, 1LL<<64-56, 1LL<<64-24, 1LL<<64-64, 1LL<<64-32,
    1LL<<64-39, 1LL<<64-7, 1LL<<64-47, 1LL<<64-15, 1LL<<64-55, 1LL<<64-23, 1LL<<64-63, 1LL<<64-31,
    1LL<<64-38, 1LL<<64-6, 1LL<<64-46, 1LL<<64-14, 1LL<<64-54, 1LL<<64-22, 1LL<<64-62, 1LL<<64-30,
    1LL<<64-37, 1LL<<64-5, 1LL<<64-45, 1LL<<64-13, 1LL<<64-53, 1LL<<64-21, 1LL<<64-61, 1LL<<64-29,
    1LL<<64-36, 1LL<<64-4, 1LL<<64-44, 1LL<<64-12, 1LL<<64-52, 1LL<<64-20, 1LL<<64-60, 1LL<<64-28,
    1LL<<64-35, 1LL<<64-3, 1LL<<64-43, 1LL<<64-11, 1LL<<64-51, 1LL<<64-19, 1LL<<64-59, 1LL<<64-27,
    1LL<<64-34, 1LL<<64-2, 1LL<<64-42, 1LL<<64-10, 1LL<<64-50, 1LL<<64-18, 1LL<<64-58, 1LL<<64-26,
    1LL<<64-33, 1LL<<64-1, 1LL<<64-41,   1LL<<64-9, 1LL<<64-49, 1LL<<64-17, 1LL<<64-57, 1LL<<64-25
};

//扩充置换表E

uint64_t E_Table[48] =
{
    1LL<<32-32,  1LL<<32-1,   1LL<<32-2,   1LL<<32-3,   1LL<<32-4,   1LL<<32-5,
    1LL<<32-4,   1LL<<32-5,   1LL<<32-6,   1LL<<32-7,   1LL<<32-8,   1LL<<32-9,
    1LL<<32-8,   1LL<<32-9, 1LL<<32-10, 1LL<<32-11, 1LL<<32-12, 1LL<<32-13,
    1LL<<32-12, 1LL<<32-13, 1LL<<32-14, 1LL<<32-15, 1LL<<32-16, 1LL<<32-17,
    1LL<<32-16, 1LL<<32-17, 1LL<<32-18, 1LL<<32-19, 1LL<<32-20, 1LL<<32-21,
    1LL<<32-20, 1LL<<32-21, 1LL<<32-22, 1LL<<32-23, 1LL<<32-24, 1LL<<32-25,
    1LL<<32-24, 1LL<<32-25, 1LL<<32-26, 1LL<<32-27, 1LL<<32-28, 1LL<<32-29,
    1LL<<32-28, 1LL<<32-29, 1LL<<32-30, 1LL<<32-31, 1LL<<32-32,   1LL<<32-1
};

//置换函数P
unsigned int P[32] =
{
    1LL<<32-16,   1LL<<32-7, 1LL<<32-20, 1LL<<32-21,
    1LL<<32-29, 1LL<<32-12, 1LL<<32-28, 1LL<<32-17,
    1LL<<32-1, 1LL<<32-15, 1LL<<32-23, 1LL<<32-26,
    1LL<<32-5, 1LL<<32-18, 1LL<<32-31, 1LL<<32-10,
    1LL<<32-2,   1LL<<32-8, 1LL<<32-24, 1LL<<32-14,
    1LL<<32-32, 1LL<<32-27,   1LL<<32-3,   1LL<<32-9,
    1LL<<32-19, 1LL<<32-13, 1LL<<32-30,   1LL<<32-6,
    1LL<<32-22, 1LL<<32-11,   1LL<<32-4, 1LL<<32-25
};

//S盒
const char S[8][4][16] = {
        // S1
        14,  4,        13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,
        0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,
        4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0,
        15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13,
        // S2 
        15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,
        3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,
        0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15,
        13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9,
        // S3 
        10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,
        13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,
        13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
        1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12,
        // S4 
        7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,
        13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,
        10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
        3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14,
        // S5 
        2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9,
        14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6,
        4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14,
        11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3,
        // S6 
        12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
        10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
        9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
        4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13,
        // S7 
        4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
        13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
        1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
        6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12,
        // S8 
        13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
        1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
        7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
        2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
};
//置换选择1
uint64_t PC_1[56] =
{
    1LL<<64-57,1LL<<64-49,1LL<<64-41,1LL<<64-33,1LL<<64-25,1LL<<64-17,1LL<<64-9,
    1LL<<64-1,1LL<<64-58,1LL<<64-50,1LL<<64-42,1LL<<64-34,1LL<<64-26,1LL<<64-18,
    1LL<<64-10,1LL<<64-2,1LL<<64-59,1LL<<64-51,1LL<<64-43,1LL<<64-35,1LL<<64-27,
    1LL<<64-19,1LL<<64-11,1LL<<64-3,1LL<<64-60,1LL<<64-52,1LL<<64-44,1LL<<64-36,
    1LL<<64-63,1LL<<64-55,1LL<<64-47,1LL<<64-39,1LL<<64-31,1LL<<64-23,1LL<<64-15,
    1LL<<64-7,1LL<<64-62,1LL<<64-54,1LL<<64-46,1LL<<64-38,1LL<<64-30,1LL<<64-22,
    1LL<<64-14,1LL<<64-6,1LL<<64-61,1LL<<64-53,1LL<<64-45,1LL<<64-37,1LL<<64-29,
    1LL<<64-21,1LL<<64-13,1LL<<64-5,1LL<<64-28,1LL<<64-20,1LL<<64-12,1LL<<64-4
};

//置换选择2
uint64_t PC_2[48] =
{
    1LL<<56-14,1LL<<56-17,1LL<<56-11,1LL<<56-24,1LL<<56-1,1LL<<56-5,
    1LL<<56-3,1LL<<56-28,1LL<<56-15,1LL<<56-6,1LL<<56-21,1LL<<56-10,
    1LL<<56-23,1LL<<56-19,1LL<<56-12,1LL<<56-4,1LL<<56-26,1LL<<56-8,
    1LL<<56-16,1LL<<56-7,1LL<<56-27,1LL<<56-20,1LL<<56-13,1LL<<56-2,
    1LL<<56-41,1LL<<56-52,1LL<<56-31,1LL<<56-37,1LL<<56-47,1LL<<56-55,
    1LL<<56-30,1LL<<56-40,1LL<<56-51,1LL<<56-45,1LL<<56-33,1LL<<56-48,
    1LL<<56-44,1LL<<56-49,1LL<<56-39,1LL<<56-56,1LL<<56-34,1LL<<56-53,
    1LL<<56-46,1LL<<56-42,1LL<<56-50,1LL<<56-36,1LL<<56-29,1LL<<56-32
};
//对左移次数的规定
int MOVE_TIMES[16] = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};

//产生bit位掩码
#define MASK(bit) (~(-1LL<bit))
//zero mask 产生bit位0掩码
#define ZMASK(bit) (-1LL<bit)
//left circle rol循环左移1位
#define LCROL(num,bit) ((num&MASK(bit-1))<<1)+((num&(1<<bit-1))!=0)
//部分取高位
#define HIHALF(num,bit) num>>(bit/2)
//部分取低位
#define LOHALF(num,bit) num&MASK(bit/2)
//取高位
#define HIGH(num) HIHALF(num,sizeof(num)*8)
//取低位
#define LOW(num) LOHALF(num,sizeof(num)*8)
#define COM(hi,low) LONGCAT(hi,low,64)
#define LONGCAT(hi,low,bit) (((uint64_t)hi<<(bit/2))+(unsigned)low)

uint64_t des_applypc(uint64_t key,uint64_t *pc,int len)
{
    uint64_t ret;int i;
    ret=0;i=0;
    ret=(key&pc[0])!=0?1:0;
    for(i=1; i<len; i++)
    {
        ret<<=1;
        ret+=(key&pc[i])!=0?1:0;
    }
    return ret;
}
uint64_t des_lrol(int *hi,int *low,int loop)
{
    while(loop>0)
    {
        *hi = LCROL(*hi,28);
        *low = LCROL(*low,28);
        loop--;
    }
    uint64_t ret = LONGCAT(*hi,*low,56);
    return ret;
}
void des_ckey(uint64_t key,uint64_t *store)//生成轮换key
{
    uint64_t tmp;
    tmp = des_applypc(key,PC_1,56);
    cout<<tmp<<endl;
    int i;
    unsigned hi = HIHALF(tmp,56);
    unsigned low = LOHALF(tmp,56);
    for(i=0; i<16; i++)
    {
        cout<<i<<" "<<hi<<" "<<low<<endl;
        tmp = des_lrol(&hi,&low,MOVE_TIMES[i]);
        store[i]=des_applypc(tmp,PC_2,48);
    }
}

int main(int argc,char*argv[])
{
   uint64_t store[16];uint64_t key=0xFEFEFEFEFEFEFEFE;
   //uint64_t key=0xFFFFFFFFFFFFFF;
   des_ckey(key,store);
   FILE*file=fopen("ttt2.txt","wb");assert(file);
   assert(fwrite((char*)&(store[0]),sizeof(uint64_t),16,file)==16);
   cout<<sizeof(long)<<endl;
   return 0;
}